var = 10 ---> properties / data/ states
functions ---> functionalities / method /behaviour

I am MSysian.
className       --> camel case
ClassName       --> pascal case
var_name
func_name

Object Oriented Programming
------------------------------
Opps is a structure where we can bunddle some set of similar properties and methods
-> To write reusable codes using classes and objects is called OOP.

class
-----
This is a user defined datatype, which specifies the properties and functionalities to be storesd.
Here we are specifing the base/ intial data/ properties and functionalities to  storesd
we define a class using 'class' keywod.

Syntax:
class ClassName:
    data / properties / states
    functionalities / methods/ behaviours


inside a class first we have write all the properties, then only we can define our menthod


Ex:
class Car:
    color = 'red'
    wheels = 4

    def start(self):
        print('started')

    def stop(self):
        print('stopped')


Object
------
Object is a real world entity consists of some data and menthods
-> It is an instance of a class, it will have all the properties and functionalities of that class

we can intialize object by calling the class name.

Syntax:
object_name = ClassName()

when ever we intialize an object, will copy all the properties and methods from class.


Ex:
nano = Car()


Memory management of class
------------------
Whenever our controller sees that class keyword, it will create a dict block with key and val.
it will store all the properties, key will store the variable name and val will store tha val of that data
for functionalities, it will go to method area and create a methof block and
address oft that block will be stored in val part of that function name.
some address wil be assigned to that dict block.
the class name will point to that adress.


Memory management of objects
-------------------------------
When our controller get a new object,
it will create one dict block again
it will copy all the properties and func_name to key part
for value it will get address and store it.
some address will given to that block
object will pont to that addres


There is two parts in oops
---------------------------
properties / data / states
    i) Generic data / class data
    ii) Specific data / object data

menthods / behaviours / functionalities
    i) object method
    ii) class method
    ii) static method


Generic data
---------------
Generic data is also known as class data.

the data which are common in both class and object is called Generic data
the data is written in class block.

The Generic data will be stored inside the class dict block, and refernece ot the data will be stored in object dict block

To access the Generic data we can take help of class name and objec name with dot (.) operator

    --> ClassName.propertie_name
    --> obj_name. propertie_name

if we want to modify value for class
    --> ClassName.propertie_name = new-val

if we want to modify data for object
    --> obj_name.propertie_name = new_val

Note -if we change the val for object, it will not point to the class data, it will become a Specific data


Specific / object data
-----------------------
The data which is only specific to the object is known specific or object data

Specific data is created in object dict block

object data are specific to that perticular object only

To create a bject data, we user
    Syntax:
    obj_name.new_property = new_val

    Ex:
    tesla.ads = True


Constructor on initalization
-------------
Constructor is a method which is used to create specific data for all the objects

Constructor is special method in python whose name is predefined.

    i.e. __init__()

it will take one defalut arg, ie. "self"

"self" is an arg., it will store the adress of that object from where it is called
Constructor / __init__ method will be called automatically when we create one object.

Constructor method should be written in class after writing all the feneric data.

To give that specific data we have to give args in parenthesis, while creating object

Constructor is one of object method.

Syntax:
    def __init__(self, arg1, arg2, ..., argn):
        self.obj_data1 = new_val1
        self.obj_data2 = new_val2
        self.obj_data3 = new_val3


obj_name = ClassName(arg1, arg2, arg3...)
Ex:
class Car:
    wheels = 4

    def __init__(self, c):
        self.color = c

    def start(self):
        print("started")

    def stop(self):
        print('stopped')

nano = Car("red")
tesla = Car("Green")

Methods 
------------
There are 3 types of method

1) object method
2) class menthod
3) static method

1) object method
---------------
    object method is a method which will point to the object dict vlock

    object method will have one defalut arg i.e. 'self'

    whatever we doing in object method it will reflect in obj dict block.

    self will store the adress of that object from where it is called

    Syntax:
    class ClassName:
        properties
        Constructor

        def obj_method(self, arg1, arg2, arg3....):
            statement 1
            statement 2
            statement 3


    obj_name = ClassName()
    # calling object name 
    obj_name.obj_method(arg1, arg2, arg3....)

    # calling using class name
    ClassName.obj_method(obj_name, arg1, arg2, arg3...)
